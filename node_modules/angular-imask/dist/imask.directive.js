var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Directive, ElementRef, Input, Output, forwardRef, Renderer2, EventEmitter, Optional, Inject } from '@angular/core';
import { NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';
import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
import IMask from 'imask';
function _isAndroid() {
    var userAgent = getDOM() ? getDOM().getUserAgent() : '';
    return /android (\d+)/.test(userAgent.toLowerCase());
}
export var MASKEDINPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return IMaskDirective; }),
    multi: true
};
var DEFAULT_IMASK_ELEMENT = function (elementRef) { return elementRef.nativeElement; };
var IMaskDirective = /** @class */ (function () {
    function IMaskDirective(_elementRef, _renderer, _compositionMode) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._compositionMode = _compositionMode;
        // init here to support AOT
        this.onTouched = function () { };
        this.onChange = function () { };
        this.imaskElement = DEFAULT_IMASK_ELEMENT;
        this.accept = new EventEmitter();
        this.complete = new EventEmitter();
        this.viewInitialized = false;
        this._composing = false;
        if (this._compositionMode == null) {
            this._compositionMode = !_isAndroid();
        }
    }
    Object.defineProperty(IMaskDirective.prototype, "element", {
        get: function () {
            return this.imaskElement(this._elementRef, this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IMaskDirective.prototype, "maskValue", {
        get: function () {
            if (!this.maskRef)
                return this.element.value;
            if (this.unmask === 'typed')
                return this.maskRef.typedValue;
            if (this.unmask)
                return this.maskRef.unmaskedValue;
            return this.maskRef.value;
        },
        set: function (value) {
            if (this.maskRef) {
                if (this.unmask === 'typed')
                    this.maskRef.typedValue = value;
                else if (this.unmask)
                    this.maskRef.unmaskedValue = value;
                else
                    this.maskRef.value = value;
            }
            else {
                this._renderer.setProperty(this.element, 'value', value);
            }
        },
        enumerable: true,
        configurable: true
    });
    IMaskDirective.prototype.ngAfterViewInit = function () {
        if (!this.imask)
            return;
        this.initMask();
        this.viewInitialized = true;
    };
    IMaskDirective.prototype.ngOnChanges = function (changes) {
        if (changes.elementRef && !this.imaskElement)
            this.imaskElement = DEFAULT_IMASK_ELEMENT;
        if (!changes.imask || !this.viewInitialized)
            return;
        if (this.imask) {
            if (this.maskRef)
                this.maskRef.updateOptions(this.imask);
            else {
                this.initMask();
                this.onChange(this.maskValue);
            }
        }
        else {
            this.destroyMask();
        }
    };
    IMaskDirective.prototype.destroyMask = function () {
        if (this.maskRef) {
            this.maskRef.destroy();
            delete this.maskRef;
        }
    };
    IMaskDirective.prototype.ngOnDestroy = function () {
        this.destroyMask();
        this.accept.complete();
        this.complete.complete();
    };
    IMaskDirective.prototype.writeValue = function (value) {
        value = value == null ? '' : value;
        if (this.maskRef)
            this.maskValue = value;
        else
            this._renderer.setProperty(this.element, 'value', value);
    };
    IMaskDirective.prototype._onAccept = function () {
        this.onChange(this.maskValue);
        this.onTouched();
        this.accept.emit(this.maskValue);
    };
    IMaskDirective.prototype._onComplete = function () {
        this.complete.emit(this.maskValue);
    };
    IMaskDirective.prototype.initMask = function () {
        this.maskRef = new IMask(this.element, this.imask)
            .on('accept', this._onAccept.bind(this))
            .on('complete', this._onComplete.bind(this));
    };
    IMaskDirective.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setProperty(this.element, 'disabled', isDisabled);
    };
    IMaskDirective.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    IMaskDirective.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    IMaskDirective.prototype._handleInput = function (value) {
        // if mask is attached all input goes throw mask
        if (this.maskRef)
            return;
        if (!this._compositionMode || (this._compositionMode && !this._composing)) {
            this.onChange(value);
        }
    };
    IMaskDirective.prototype._compositionStart = function () { this._composing = true; };
    IMaskDirective.prototype._compositionEnd = function (value) {
        this._composing = false;
        this._compositionMode && this._handleInput(value);
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], IMaskDirective.prototype, "imask", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], IMaskDirective.prototype, "unmask", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], IMaskDirective.prototype, "imaskElement", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], IMaskDirective.prototype, "accept", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], IMaskDirective.prototype, "complete", void 0);
    IMaskDirective = __decorate([
        Directive({
            selector: '[imask]',
            host: {
                '(input)': '_handleInput($event.target.value)',
                '(blur)': 'onTouched()',
                '(compositionstart)': '_compositionStart()',
                '(compositionend)': '_compositionEnd($event.target.value)'
            },
            providers: [MASKEDINPUT_VALUE_ACCESSOR]
        }),
        __param(2, Optional()), __param(2, Inject(COMPOSITION_BUFFER_MODE)),
        __metadata("design:paramtypes", [ElementRef,
            Renderer2, Boolean])
    ], IMaskDirective);
    return IMaskDirective;
}());
export { IMaskDirective };
//# sourceMappingURL=imask.directive.js.map