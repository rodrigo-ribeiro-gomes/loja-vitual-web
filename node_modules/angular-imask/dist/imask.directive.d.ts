import { ElementRef, Provider, Renderer2, EventEmitter, OnDestroy, OnChanges, AfterViewInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare const MASKEDINPUT_VALUE_ACCESSOR: Provider;
export declare class IMaskDirective implements ControlValueAccessor, AfterViewInit, OnDestroy, OnChanges {
    private _elementRef;
    private _renderer;
    private _compositionMode;
    maskRef: any;
    onTouched: any;
    onChange: any;
    private viewInitialized;
    private _composing;
    imask: any;
    unmask?: boolean | 'typed';
    imaskElement: (elementRef: any, directiveRef: any) => any;
    accept: EventEmitter<any>;
    complete: EventEmitter<any>;
    constructor(_elementRef: ElementRef, _renderer: Renderer2, _compositionMode: boolean);
    readonly element: any;
    maskValue: any;
    ngAfterViewInit(): void;
    ngOnChanges(changes: any): void;
    destroyMask(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    _onAccept(): void;
    _onComplete(): void;
    private initMask;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _handleInput(value: any): void;
    _compositionStart(): void;
    _compositionEnd(value: any): void;
}
