(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/platform-browser'), require('imask'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/forms', '@angular/platform-browser', 'imask', '@angular/common'], factory) :
    (factory((global.ng = global.ng || {}, global.ng.imask = {}),global.ng.core,global.ng.forms,global.ng.platformBrowser,global.IMask,global.ng.common));
}(this, (function (exports,core,forms,platformBrowser,IMask,common) { 'use strict';

    IMask = IMask && IMask.hasOwnProperty('default') ? IMask['default'] : IMask;

    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    function _isAndroid() {
        var userAgent = platformBrowser.ɵgetDOM() ? platformBrowser.ɵgetDOM().getUserAgent() : '';
        return /android (\d+)/.test(userAgent.toLowerCase());
    }
    var MASKEDINPUT_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return IMaskDirective; }),
        multi: true
    };
    var DEFAULT_IMASK_ELEMENT = function (elementRef) { return elementRef.nativeElement; };
    var IMaskDirective = /** @class */ (function () {
        function IMaskDirective(_elementRef, _renderer, _compositionMode) {
            this._elementRef = _elementRef;
            this._renderer = _renderer;
            this._compositionMode = _compositionMode;
            // init here to support AOT
            this.onTouched = function () { };
            this.onChange = function () { };
            this.imaskElement = DEFAULT_IMASK_ELEMENT;
            this.accept = new core.EventEmitter();
            this.complete = new core.EventEmitter();
            this.viewInitialized = false;
            this._composing = false;
            if (this._compositionMode == null) {
                this._compositionMode = !_isAndroid();
            }
        }
        Object.defineProperty(IMaskDirective.prototype, "element", {
            get: function () {
                return this.imaskElement(this._elementRef, this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IMaskDirective.prototype, "maskValue", {
            get: function () {
                if (!this.maskRef)
                    return this.element.value;
                if (this.unmask === 'typed')
                    return this.maskRef.typedValue;
                if (this.unmask)
                    return this.maskRef.unmaskedValue;
                return this.maskRef.value;
            },
            set: function (value) {
                if (this.maskRef) {
                    if (this.unmask === 'typed')
                        this.maskRef.typedValue = value;
                    else if (this.unmask)
                        this.maskRef.unmaskedValue = value;
                    else
                        this.maskRef.value = value;
                }
                else {
                    this._renderer.setProperty(this.element, 'value', value);
                }
            },
            enumerable: true,
            configurable: true
        });
        IMaskDirective.prototype.ngAfterViewInit = function () {
            if (!this.imask)
                return;
            this.initMask();
            this.viewInitialized = true;
        };
        IMaskDirective.prototype.ngOnChanges = function (changes) {
            if (changes.elementRef && !this.imaskElement)
                this.imaskElement = DEFAULT_IMASK_ELEMENT;
            if (!changes.imask || !this.viewInitialized)
                return;
            if (this.imask) {
                if (this.maskRef)
                    this.maskRef.updateOptions(this.imask);
                else {
                    this.initMask();
                    this.onChange(this.maskValue);
                }
            }
            else {
                this.destroyMask();
            }
        };
        IMaskDirective.prototype.destroyMask = function () {
            if (this.maskRef) {
                this.maskRef.destroy();
                delete this.maskRef;
            }
        };
        IMaskDirective.prototype.ngOnDestroy = function () {
            this.destroyMask();
            this.accept.complete();
            this.complete.complete();
        };
        IMaskDirective.prototype.writeValue = function (value) {
            value = value == null ? '' : value;
            if (this.maskRef)
                this.maskValue = value;
            else
                this._renderer.setProperty(this.element, 'value', value);
        };
        IMaskDirective.prototype._onAccept = function () {
            this.onChange(this.maskValue);
            this.onTouched();
            this.accept.emit(this.maskValue);
        };
        IMaskDirective.prototype._onComplete = function () {
            this.complete.emit(this.maskValue);
        };
        IMaskDirective.prototype.initMask = function () {
            this.maskRef = new IMask(this.element, this.imask)
                .on('accept', this._onAccept.bind(this))
                .on('complete', this._onComplete.bind(this));
        };
        IMaskDirective.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this.element, 'disabled', isDisabled);
        };
        IMaskDirective.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        IMaskDirective.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        IMaskDirective.prototype._handleInput = function (value) {
            // if mask is attached all input goes throw mask
            if (this.maskRef)
                return;
            if (!this._compositionMode || (this._compositionMode && !this._composing)) {
                this.onChange(value);
            }
        };
        IMaskDirective.prototype._compositionStart = function () { this._composing = true; };
        IMaskDirective.prototype._compositionEnd = function (value) {
            this._composing = false;
            this._compositionMode && this._handleInput(value);
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], IMaskDirective.prototype, "imask", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], IMaskDirective.prototype, "unmask", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Function)
        ], IMaskDirective.prototype, "imaskElement", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], IMaskDirective.prototype, "accept", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], IMaskDirective.prototype, "complete", void 0);
        IMaskDirective = __decorate([
            core.Directive({
                selector: '[imask]',
                host: {
                    '(input)': '_handleInput($event.target.value)',
                    '(blur)': 'onTouched()',
                    '(compositionstart)': '_compositionStart()',
                    '(compositionend)': '_compositionEnd($event.target.value)'
                },
                providers: [MASKEDINPUT_VALUE_ACCESSOR]
            }),
            __param(2, core.Optional()), __param(2, core.Inject(forms.COMPOSITION_BUFFER_MODE)),
            __metadata("design:paramtypes", [core.ElementRef,
                core.Renderer2, Boolean])
        ], IMaskDirective);
        return IMaskDirective;
    }());

    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var IMaskModule = /** @class */ (function () {
        function IMaskModule() {
        }
        IMaskModule = __decorate$1([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [IMaskDirective],
                exports: [IMaskDirective]
            })
        ], IMaskModule);
        return IMaskModule;
    }());

    exports.MASKEDINPUT_VALUE_ACCESSOR = MASKEDINPUT_VALUE_ACCESSOR;
    exports.IMaskDirective = IMaskDirective;
    exports.IMaskModule = IMaskModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-imask.umd.js.map
